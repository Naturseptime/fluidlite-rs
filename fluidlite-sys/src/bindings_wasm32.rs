/* automatically generated by rust-bindgen */

pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const FLUID_HINT_BOUNDED_BELOW: u32 = 1;
pub const FLUID_HINT_BOUNDED_ABOVE: u32 = 2;
pub const FLUID_HINT_TOGGLED: u32 = 4;
pub const FLUID_HINT_SAMPLE_RATE: u32 = 8;
pub const FLUID_HINT_LOGARITHMIC: u32 = 16;
pub const FLUID_HINT_INTEGER: u32 = 32;
pub const FLUID_HINT_FILENAME: u32 = 1;
pub const FLUID_HINT_OPTIONLIST: u32 = 2;
pub const FLUID_REVERB_DEFAULT_ROOMSIZE: f64 = 0.2;
pub const FLUID_REVERB_DEFAULT_DAMP: f64 = 0.0;
pub const FLUID_REVERB_DEFAULT_WIDTH: f64 = 0.5;
pub const FLUID_REVERB_DEFAULT_LEVEL: f64 = 0.9;
pub const FLUID_CHORUS_DEFAULT_N: u32 = 3;
pub const FLUID_CHORUS_DEFAULT_LEVEL: f64 = 2.0;
pub const FLUID_CHORUS_DEFAULT_SPEED: f64 = 0.3;
pub const FLUID_CHORUS_DEFAULT_DEPTH: f64 = 8.0;
pub const FLUID_SAMPLETYPE_MONO: u32 = 1;
pub const FLUID_SAMPLETYPE_RIGHT: u32 = 2;
pub const FLUID_SAMPLETYPE_LEFT: u32 = 4;
pub const FLUID_SAMPLETYPE_LINKED: u32 = 8;
pub const FLUID_SAMPLETYPE_OGG_VORBIS: u32 = 16;
pub const FLUID_SAMPLETYPE_OGG_VORBIS_UNPACKED: u32 = 32;
pub const FLUID_SAMPLETYPE_ROM: u32 = 32768;
pub const FLUID_NUM_MOD: u32 = 64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fluid_hashtable_t {
    _unused: [u8; 0],
}
pub type fluid_settings_t = _fluid_hashtable_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fluid_synth_t {
    _unused: [u8; 0],
}
pub type fluid_synth_t = _fluid_synth_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fluid_voice_t {
    _unused: [u8; 0],
}
pub type fluid_voice_t = _fluid_voice_t;
pub type fluid_sfloader_t = _fluid_sfloader_t;
pub type fluid_sfont_t = _fluid_sfont_t;
pub type fluid_preset_t = _fluid_preset_t;
pub type fluid_sample_t = _fluid_sample_t;
pub type fluid_mod_t = _fluid_mod_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fluid_audio_driver_t {
    _unused: [u8; 0],
}
pub type fluid_audio_driver_t = _fluid_audio_driver_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fluid_player_t {
    _unused: [u8; 0],
}
pub type fluid_player_t = _fluid_player_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fluid_midi_event_t {
    _unused: [u8; 0],
}
pub type fluid_midi_event_t = _fluid_midi_event_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fluid_midi_driver_t {
    _unused: [u8; 0],
}
pub type fluid_midi_driver_t = _fluid_midi_driver_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fluid_midi_router_t {
    _unused: [u8; 0],
}
pub type fluid_midi_router_t = _fluid_midi_router_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fluid_midi_router_rule_t {
    _unused: [u8; 0],
}
pub type fluid_midi_router_rule_t = _fluid_midi_router_rule_t;
pub type fluid_cmd_handler_t = _fluid_hashtable_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fluid_shell_t {
    _unused: [u8; 0],
}
pub type fluid_shell_t = _fluid_shell_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fluid_server_t {
    _unused: [u8; 0],
}
pub type fluid_server_t = _fluid_server_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fluid_event_t {
    _unused: [u8; 0],
}
pub type fluid_event_t = _fluid_event_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fluid_sequencer_t {
    _unused: [u8; 0],
}
pub type fluid_sequencer_t = _fluid_sequencer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fluid_ramsfont_t {
    _unused: [u8; 0],
}
pub type fluid_ramsfont_t = _fluid_ramsfont_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fluid_rampreset_t {
    _unused: [u8; 0],
}
pub type fluid_rampreset_t = _fluid_rampreset_t;
pub type fluid_fileapi_t = _fluid_fileapi_t;
pub type fluid_istream_t = ::std::os::raw::c_int;
pub type fluid_ostream_t = ::std::os::raw::c_int;
pub const fluid_types_enum_FLUID_NO_TYPE: fluid_types_enum = -1;
pub const fluid_types_enum_FLUID_NUM_TYPE: fluid_types_enum = 0;
pub const fluid_types_enum_FLUID_INT_TYPE: fluid_types_enum = 1;
pub const fluid_types_enum_FLUID_STR_TYPE: fluid_types_enum = 2;
pub const fluid_types_enum_FLUID_SET_TYPE: fluid_types_enum = 3;
pub type fluid_types_enum = i32;
pub const fluid_chorus_mod_FLUID_CHORUS_MOD_SINE: fluid_chorus_mod = 0;
pub const fluid_chorus_mod_FLUID_CHORUS_MOD_TRIANGLE: fluid_chorus_mod = 1;
pub type fluid_chorus_mod = u32;
pub const fluid_interp_FLUID_INTERP_NONE: fluid_interp = 0;
pub const fluid_interp_FLUID_INTERP_LINEAR: fluid_interp = 1;
pub const fluid_interp_FLUID_INTERP_DEFAULT: fluid_interp = 4;
pub const fluid_interp_FLUID_INTERP_4THORDER: fluid_interp = 4;
pub const fluid_interp_FLUID_INTERP_7THORDER: fluid_interp = 7;
pub const fluid_interp_FLUID_INTERP_HIGHEST: fluid_interp = 7;
pub type fluid_interp = u32;
pub type fluid_audio_callback_t = ::std::option::Option<
    unsafe extern "C" fn(
        synth: *mut fluid_synth_t,
        len: ::std::os::raw::c_int,
        out1: *mut ::std::os::raw::c_void,
        loff: ::std::os::raw::c_int,
        lincr: ::std::os::raw::c_int,
        out2: *mut ::std::os::raw::c_void,
        roff: ::std::os::raw::c_int,
        rincr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub const FLUID_PRESET_SELECTED: _bindgen_ty_1 = 0;
pub const FLUID_PRESET_UNSELECTED: _bindgen_ty_1 = 1;
pub const FLUID_SAMPLE_DONE: _bindgen_ty_1 = 2;
#[doc = "   SoundFont plugins"]
#[doc = ""]
#[doc = "    It is possible to add new SoundFont loaders to the"]
#[doc = "    synthesizer. The API uses a couple of \"interfaces\" (structures"]
#[doc = "    with callback functions): fluid_sfloader_t, fluid_sfont_t, and"]
#[doc = "    fluid_preset_t."]
#[doc = ""]
#[doc = "    To add a new SoundFont loader to the synthesizer, call"]
#[doc = "    fluid_synth_add_sfloader() and pass a pointer to an"]
#[doc = "    fluid_sfloader_t structure. The important callback function in"]
#[doc = "    this structure is \"load\", which should try to load a file and"]
#[doc = "    returns a fluid_sfont_t structure, or NULL if it fails."]
#[doc = ""]
#[doc = "    The fluid_sfont_t structure contains a callback to obtain the"]
#[doc = "    name of the soundfont. It contains two functions to iterate"]
#[doc = "    though the contained presets, and one function to obtain a"]
#[doc = "    preset corresponding to a bank and preset number. This"]
#[doc = "    function should return an fluid_preset_t structure."]
#[doc = ""]
#[doc = "    The fluid_preset_t structure contains some functions to obtain"]
#[doc = "    information from the preset (name, bank, number). The most"]
#[doc = "    important callback is the noteon function. The noteon function"]
#[doc = "    should call fluid_synth_alloc_voice() for every sample that has"]
#[doc = "    to be played. fluid_synth_alloc_voice() expects a pointer to a"]
#[doc = "    fluid_sample_t structure and returns a pointer to the opaque"]
#[doc = "    fluid_voice_t structure. To set or increments the values of a"]
#[doc = "    generator, use fluid_voice_gen_{set,incr}. When you are"]
#[doc = "    finished initializing the voice call fluid_voice_start() to"]
#[doc = "    start playing the synthesis voice."]
pub type _bindgen_ty_1 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fluid_sfloader_t {
    #[doc = " Private data"]
    pub data: *mut ::std::os::raw::c_void,
    #[doc = " The free must free the memory allocated for the loader in"]
    #[doc = " addition to any private data. It should return 0 if no error"]
    #[doc = " occured, non-zero otherwise."]
    pub free: ::std::option::Option<
        unsafe extern "C" fn(loader: *mut fluid_sfloader_t) -> ::std::os::raw::c_int,
    >,
    #[doc = " Load a file. Returns NULL if an error occured."]
    pub load: ::std::option::Option<
        unsafe extern "C" fn(
            loader: *mut fluid_sfloader_t,
            filename: *const ::std::os::raw::c_char,
        ) -> *mut fluid_sfont_t,
    >,
    #[doc = " Callback structure specifying file operations used during soundfont loading to allow custom loading, such as from memory"]
    pub fileapi: *mut fluid_fileapi_t,
}
#[test]
fn bindgen_test_layout__fluid_sfloader_t() {
    assert_eq!(
        ::std::mem::size_of::<_fluid_sfloader_t>(),
        16usize,
        concat!("Size of: ", stringify!(_fluid_sfloader_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_fluid_sfloader_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_fluid_sfloader_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fluid_sfloader_t>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_fluid_sfloader_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fluid_sfloader_t>())).free as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_fluid_sfloader_t),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fluid_sfloader_t>())).load as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_fluid_sfloader_t),
            "::",
            stringify!(load)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fluid_sfloader_t>())).fileapi as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_fluid_sfloader_t),
            "::",
            stringify!(fileapi)
        )
    );
}
#[doc = " File callback structure to enable custom soundfont loading (e.g. from memory)."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fluid_fileapi_t {
    #[doc = " Private data"]
    pub data: *mut ::std::os::raw::c_void,
    #[doc = " The free must free the memory allocated for the loader in"]
    #[doc = " addition to any private data. It should return 0 if no error"]
    #[doc = " occured, non-zero otherwise."]
    pub free: ::std::option::Option<
        unsafe extern "C" fn(fileapi: *mut fluid_fileapi_t) -> ::std::os::raw::c_int,
    >,
    #[doc = " Opens the file or memory indicated by \\c filename in binary read mode."]
    #[doc = " \\c filename matches the one provided during the fluid_synth_sfload() call."]
    #[doc = ""]
    #[doc = " @return returns a file handle on success, NULL otherwise"]
    pub fopen: ::std::option::Option<
        unsafe extern "C" fn(
            fileapi: *mut fluid_fileapi_t,
            filename: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_void,
    >,
    #[doc = " Reads \\c count bytes to the specified buffer \\c buf."]
    #[doc = ""]
    #[doc = " @return returns #FLUID_OK if exactly \\c count bytes were successfully read, else #FLUID_FAILED"]
    pub fread: ::std::option::Option<
        unsafe extern "C" fn(
            buf: *mut ::std::os::raw::c_void,
            count: ::std::os::raw::c_int,
            handle: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Same purpose and behaviour as fseek."]
    #[doc = ""]
    #[doc = " @param origin either \\c SEEK_SET, \\c SEEK_CUR or \\c SEEK_END"]
    #[doc = ""]
    #[doc = " @return returns #FLUID_OK if the seek was successfully performed while not seeking beyond a buffer or file, #FLUID_FAILED otherwise"]
    pub fseek: ::std::option::Option<
        unsafe extern "C" fn(
            handle: *mut ::std::os::raw::c_void,
            offset: ::std::os::raw::c_long,
            origin: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Closes the handle and frees used ressources."]
    #[doc = ""]
    #[doc = " @return returns #FLUID_OK on success, #FLUID_FAILED on error"]
    pub fclose: ::std::option::Option<
        unsafe extern "C" fn(handle: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    #[doc = " @return returns current file offset or #FLUID_FAILED on error"]
    pub ftell: ::std::option::Option<
        unsafe extern "C" fn(handle: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_long,
    >,
}
#[test]
fn bindgen_test_layout__fluid_fileapi_t() {
    assert_eq!(
        ::std::mem::size_of::<_fluid_fileapi_t>(),
        28usize,
        concat!("Size of: ", stringify!(_fluid_fileapi_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_fluid_fileapi_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_fluid_fileapi_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fluid_fileapi_t>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_fluid_fileapi_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fluid_fileapi_t>())).free as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_fluid_fileapi_t),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fluid_fileapi_t>())).fopen as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_fluid_fileapi_t),
            "::",
            stringify!(fopen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fluid_fileapi_t>())).fread as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_fluid_fileapi_t),
            "::",
            stringify!(fread)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fluid_fileapi_t>())).fseek as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_fluid_fileapi_t),
            "::",
            stringify!(fseek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fluid_fileapi_t>())).fclose as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_fluid_fileapi_t),
            "::",
            stringify!(fclose)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fluid_fileapi_t>())).ftell as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_fluid_fileapi_t),
            "::",
            stringify!(ftell)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fluid_sfont_t {
    pub data: *mut ::std::os::raw::c_void,
    pub id: ::std::os::raw::c_uint,
    #[doc = " The 'free' callback function should return 0 when it was able to"]
    #[doc = "free all resources. It should return a non-zero value if some of"]
    #[doc = "the samples could not be freed because they are still in use."]
    pub free: ::std::option::Option<
        unsafe extern "C" fn(sfont: *mut fluid_sfont_t) -> ::std::os::raw::c_int,
    >,
    #[doc = " Return the name of the sfont"]
    pub get_name: ::std::option::Option<
        unsafe extern "C" fn(sfont: *mut fluid_sfont_t) -> *mut ::std::os::raw::c_char,
    >,
    #[doc = " Return the preset with the specified bank and preset number. All"]
    #[doc = "  the fields, including the 'sfont' field, should * be filled"]
    #[doc = "  in. If the preset cannot be found, the function returns NULL."]
    pub get_preset: ::std::option::Option<
        unsafe extern "C" fn(
            sfont: *mut fluid_sfont_t,
            bank: ::std::os::raw::c_uint,
            prenum: ::std::os::raw::c_uint,
        ) -> *mut fluid_preset_t,
    >,
    pub iteration_start: ::std::option::Option<unsafe extern "C" fn(sfont: *mut fluid_sfont_t)>,
    pub iteration_next: ::std::option::Option<
        unsafe extern "C" fn(
            sfont: *mut fluid_sfont_t,
            preset: *mut fluid_preset_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__fluid_sfont_t() {
    assert_eq!(
        ::std::mem::size_of::<_fluid_sfont_t>(),
        28usize,
        concat!("Size of: ", stringify!(_fluid_sfont_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_fluid_sfont_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_fluid_sfont_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fluid_sfont_t>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_fluid_sfont_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fluid_sfont_t>())).id as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_fluid_sfont_t),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fluid_sfont_t>())).free as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_fluid_sfont_t),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fluid_sfont_t>())).get_name as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_fluid_sfont_t),
            "::",
            stringify!(get_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fluid_sfont_t>())).get_preset as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_fluid_sfont_t),
            "::",
            stringify!(get_preset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fluid_sfont_t>())).iteration_start as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_fluid_sfont_t),
            "::",
            stringify!(iteration_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fluid_sfont_t>())).iteration_next as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_fluid_sfont_t),
            "::",
            stringify!(iteration_next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fluid_preset_t {
    pub data: *mut ::std::os::raw::c_void,
    pub sfont: *mut fluid_sfont_t,
    pub free: ::std::option::Option<
        unsafe extern "C" fn(preset: *mut fluid_preset_t) -> ::std::os::raw::c_int,
    >,
    pub get_name: ::std::option::Option<
        unsafe extern "C" fn(preset: *mut fluid_preset_t) -> *mut ::std::os::raw::c_char,
    >,
    pub get_banknum: ::std::option::Option<
        unsafe extern "C" fn(preset: *mut fluid_preset_t) -> ::std::os::raw::c_int,
    >,
    pub get_num: ::std::option::Option<
        unsafe extern "C" fn(preset: *mut fluid_preset_t) -> ::std::os::raw::c_int,
    >,
    #[doc = " handle a noteon event. Returns 0 if no error occured."]
    pub noteon: ::std::option::Option<
        unsafe extern "C" fn(
            preset: *mut fluid_preset_t,
            synth: *mut fluid_synth_t,
            chan: ::std::os::raw::c_int,
            key: ::std::os::raw::c_int,
            vel: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Implement this function if the preset needs to be notified about"]
    #[doc = "preset select and unselect events."]
    pub notify: ::std::option::Option<
        unsafe extern "C" fn(
            preset: *mut fluid_preset_t,
            reason: ::std::os::raw::c_int,
            chan: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__fluid_preset_t() {
    assert_eq!(
        ::std::mem::size_of::<_fluid_preset_t>(),
        32usize,
        concat!("Size of: ", stringify!(_fluid_preset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_fluid_preset_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_fluid_preset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fluid_preset_t>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_fluid_preset_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fluid_preset_t>())).sfont as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_fluid_preset_t),
            "::",
            stringify!(sfont)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fluid_preset_t>())).free as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_fluid_preset_t),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fluid_preset_t>())).get_name as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_fluid_preset_t),
            "::",
            stringify!(get_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fluid_preset_t>())).get_banknum as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_fluid_preset_t),
            "::",
            stringify!(get_banknum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fluid_preset_t>())).get_num as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_fluid_preset_t),
            "::",
            stringify!(get_num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fluid_preset_t>())).noteon as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_fluid_preset_t),
            "::",
            stringify!(noteon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fluid_preset_t>())).notify as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_fluid_preset_t),
            "::",
            stringify!(notify)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fluid_sample_t {
    pub name: [::std::os::raw::c_char; 21usize],
    pub start: ::std::os::raw::c_uint,
    pub end: ::std::os::raw::c_uint,
    pub loopstart: ::std::os::raw::c_uint,
    pub loopend: ::std::os::raw::c_uint,
    pub samplerate: ::std::os::raw::c_uint,
    pub origpitch: ::std::os::raw::c_int,
    pub pitchadj: ::std::os::raw::c_int,
    pub sampletype: ::std::os::raw::c_int,
    pub valid: ::std::os::raw::c_int,
    pub data: *mut ::std::os::raw::c_short,
    #[doc = " The amplitude, that will lower the level of the sample's loop to"]
    #[doc = "the noise floor. Needed for note turnoff optimization, will be"]
    #[doc = "filled out automatically"]
    pub amplitude_that_reaches_noise_floor_is_valid: ::std::os::raw::c_int,
    pub amplitude_that_reaches_noise_floor: f64,
    #[doc = " Count the number of playing voices that use this sample."]
    pub refcount: ::std::os::raw::c_uint,
    #[doc = " Implement this function if the sample or SoundFont needs to be"]
    #[doc = "notified when the sample is no longer used."]
    pub notify: ::std::option::Option<
        unsafe extern "C" fn(
            sample: *mut fluid_sample_t,
            reason: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Pointer to SoundFont specific data"]
    pub userdata: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__fluid_sample_t() {
    assert_eq!(
        ::std::mem::size_of::<_fluid_sample_t>(),
        96usize,
        concat!("Size of: ", stringify!(_fluid_sample_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_fluid_sample_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_fluid_sample_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fluid_sample_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_fluid_sample_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fluid_sample_t>())).start as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_fluid_sample_t),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fluid_sample_t>())).end as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_fluid_sample_t),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fluid_sample_t>())).loopstart as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_fluid_sample_t),
            "::",
            stringify!(loopstart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fluid_sample_t>())).loopend as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_fluid_sample_t),
            "::",
            stringify!(loopend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fluid_sample_t>())).samplerate as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_fluid_sample_t),
            "::",
            stringify!(samplerate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fluid_sample_t>())).origpitch as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_fluid_sample_t),
            "::",
            stringify!(origpitch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fluid_sample_t>())).pitchadj as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_fluid_sample_t),
            "::",
            stringify!(pitchadj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fluid_sample_t>())).sampletype as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_fluid_sample_t),
            "::",
            stringify!(sampletype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fluid_sample_t>())).valid as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_fluid_sample_t),
            "::",
            stringify!(valid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fluid_sample_t>())).data as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_fluid_sample_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_fluid_sample_t>())).amplitude_that_reaches_noise_floor_is_valid
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_fluid_sample_t),
            "::",
            stringify!(amplitude_that_reaches_noise_floor_is_valid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_fluid_sample_t>())).amplitude_that_reaches_noise_floor
                as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_fluid_sample_t),
            "::",
            stringify!(amplitude_that_reaches_noise_floor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fluid_sample_t>())).refcount as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_fluid_sample_t),
            "::",
            stringify!(refcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fluid_sample_t>())).notify as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_fluid_sample_t),
            "::",
            stringify!(notify)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fluid_sample_t>())).userdata as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_fluid_sample_t),
            "::",
            stringify!(userdata)
        )
    );
}
#[doc = "< The synth can't function correctly any more"]
pub const fluid_log_level_FLUID_PANIC: fluid_log_level = 0;
#[doc = "< Serious error occurred"]
pub const fluid_log_level_FLUID_ERR: fluid_log_level = 1;
#[doc = "< Warning"]
pub const fluid_log_level_FLUID_WARN: fluid_log_level = 2;
#[doc = "< Verbose informational messages"]
pub const fluid_log_level_FLUID_INFO: fluid_log_level = 3;
#[doc = "< Debugging messages"]
pub const fluid_log_level_FLUID_DBG: fluid_log_level = 4;
pub const fluid_log_level_LAST_LOG_LEVEL: fluid_log_level = 5;
#[doc = " FluidSynth log levels."]
pub type fluid_log_level = u32;
#[doc = " Log function handler callback type used by fluid_set_log_function()."]
#[doc = " @param level Log level (#fluid_log_level)"]
#[doc = " @param message Log message text"]
#[doc = " @param data User data pointer supplied to fluid_set_log_function()."]
pub type fluid_log_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        level: ::std::os::raw::c_int,
        message: *mut ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fluid_mod_t {
    pub dest: ::std::os::raw::c_uchar,
    pub src1: ::std::os::raw::c_uchar,
    pub flags1: ::std::os::raw::c_uchar,
    pub src2: ::std::os::raw::c_uchar,
    pub flags2: ::std::os::raw::c_uchar,
    pub amount: f64,
    pub next: *mut fluid_mod_t,
}
#[test]
fn bindgen_test_layout__fluid_mod_t() {
    assert_eq!(
        ::std::mem::size_of::<_fluid_mod_t>(),
        24usize,
        concat!("Size of: ", stringify!(_fluid_mod_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_fluid_mod_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_fluid_mod_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fluid_mod_t>())).dest as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_fluid_mod_t),
            "::",
            stringify!(dest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fluid_mod_t>())).src1 as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_fluid_mod_t),
            "::",
            stringify!(src1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fluid_mod_t>())).flags1 as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_fluid_mod_t),
            "::",
            stringify!(flags1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fluid_mod_t>())).src2 as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_fluid_mod_t),
            "::",
            stringify!(src2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fluid_mod_t>())).flags2 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_fluid_mod_t),
            "::",
            stringify!(flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fluid_mod_t>())).amount as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_fluid_mod_t),
            "::",
            stringify!(amount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fluid_mod_t>())).next as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_fluid_mod_t),
            "::",
            stringify!(next)
        )
    );
}
pub const fluid_mod_flags_FLUID_MOD_POSITIVE: fluid_mod_flags = 0;
pub const fluid_mod_flags_FLUID_MOD_NEGATIVE: fluid_mod_flags = 1;
pub const fluid_mod_flags_FLUID_MOD_UNIPOLAR: fluid_mod_flags = 0;
pub const fluid_mod_flags_FLUID_MOD_BIPOLAR: fluid_mod_flags = 2;
pub const fluid_mod_flags_FLUID_MOD_LINEAR: fluid_mod_flags = 0;
pub const fluid_mod_flags_FLUID_MOD_CONCAVE: fluid_mod_flags = 4;
pub const fluid_mod_flags_FLUID_MOD_CONVEX: fluid_mod_flags = 8;
pub const fluid_mod_flags_FLUID_MOD_SWITCH: fluid_mod_flags = 12;
pub const fluid_mod_flags_FLUID_MOD_GC: fluid_mod_flags = 0;
pub const fluid_mod_flags_FLUID_MOD_CC: fluid_mod_flags = 16;
pub type fluid_mod_flags = u32;
pub const fluid_mod_src_FLUID_MOD_NONE: fluid_mod_src = 0;
pub const fluid_mod_src_FLUID_MOD_VELOCITY: fluid_mod_src = 2;
pub const fluid_mod_src_FLUID_MOD_KEY: fluid_mod_src = 3;
pub const fluid_mod_src_FLUID_MOD_KEYPRESSURE: fluid_mod_src = 10;
pub const fluid_mod_src_FLUID_MOD_CHANNELPRESSURE: fluid_mod_src = 13;
pub const fluid_mod_src_FLUID_MOD_PITCHWHEEL: fluid_mod_src = 14;
pub const fluid_mod_src_FLUID_MOD_PITCHWHEELSENS: fluid_mod_src = 16;
pub type fluid_mod_src = u32;
#[doc = "< Sample start address offset (0-32767)"]
pub const fluid_gen_type_GEN_STARTADDROFS: fluid_gen_type = 0;
#[doc = "< Sample end address offset (-32767-0)"]
pub const fluid_gen_type_GEN_ENDADDROFS: fluid_gen_type = 1;
#[doc = "< Sample loop start address offset (-32767-32767)"]
pub const fluid_gen_type_GEN_STARTLOOPADDROFS: fluid_gen_type = 2;
#[doc = "< Sample loop end address offset (-32767-32767)"]
pub const fluid_gen_type_GEN_ENDLOOPADDROFS: fluid_gen_type = 3;
#[doc = "< Sample start address coarse offset (X 32768)"]
pub const fluid_gen_type_GEN_STARTADDRCOARSEOFS: fluid_gen_type = 4;
#[doc = "< Modulation LFO to pitch"]
pub const fluid_gen_type_GEN_MODLFOTOPITCH: fluid_gen_type = 5;
#[doc = "< Vibrato LFO to pitch"]
pub const fluid_gen_type_GEN_VIBLFOTOPITCH: fluid_gen_type = 6;
#[doc = "< Modulation envelope to pitch"]
pub const fluid_gen_type_GEN_MODENVTOPITCH: fluid_gen_type = 7;
#[doc = "< Filter cutoff"]
pub const fluid_gen_type_GEN_FILTERFC: fluid_gen_type = 8;
#[doc = "< Filter Q"]
pub const fluid_gen_type_GEN_FILTERQ: fluid_gen_type = 9;
#[doc = "< Modulation LFO to filter cutoff"]
pub const fluid_gen_type_GEN_MODLFOTOFILTERFC: fluid_gen_type = 10;
#[doc = "< Modulation envelope to filter cutoff"]
pub const fluid_gen_type_GEN_MODENVTOFILTERFC: fluid_gen_type = 11;
#[doc = "< Sample end address coarse offset (X 32768)"]
pub const fluid_gen_type_GEN_ENDADDRCOARSEOFS: fluid_gen_type = 12;
#[doc = "< Modulation LFO to volume"]
pub const fluid_gen_type_GEN_MODLFOTOVOL: fluid_gen_type = 13;
#[doc = "< Unused"]
pub const fluid_gen_type_GEN_UNUSED1: fluid_gen_type = 14;
#[doc = "< Chorus send amount"]
pub const fluid_gen_type_GEN_CHORUSSEND: fluid_gen_type = 15;
#[doc = "< Reverb send amount"]
pub const fluid_gen_type_GEN_REVERBSEND: fluid_gen_type = 16;
#[doc = "< Stereo panning"]
pub const fluid_gen_type_GEN_PAN: fluid_gen_type = 17;
#[doc = "< Unused"]
pub const fluid_gen_type_GEN_UNUSED2: fluid_gen_type = 18;
#[doc = "< Unused"]
pub const fluid_gen_type_GEN_UNUSED3: fluid_gen_type = 19;
#[doc = "< Unused"]
pub const fluid_gen_type_GEN_UNUSED4: fluid_gen_type = 20;
#[doc = "< Modulation LFO delay"]
pub const fluid_gen_type_GEN_MODLFODELAY: fluid_gen_type = 21;
#[doc = "< Modulation LFO frequency"]
pub const fluid_gen_type_GEN_MODLFOFREQ: fluid_gen_type = 22;
#[doc = "< Vibrato LFO delay"]
pub const fluid_gen_type_GEN_VIBLFODELAY: fluid_gen_type = 23;
#[doc = "< Vibrato LFO frequency"]
pub const fluid_gen_type_GEN_VIBLFOFREQ: fluid_gen_type = 24;
#[doc = "< Modulation envelope delay"]
pub const fluid_gen_type_GEN_MODENVDELAY: fluid_gen_type = 25;
#[doc = "< Modulation envelope attack"]
pub const fluid_gen_type_GEN_MODENVATTACK: fluid_gen_type = 26;
#[doc = "< Modulation envelope hold"]
pub const fluid_gen_type_GEN_MODENVHOLD: fluid_gen_type = 27;
#[doc = "< Modulation envelope decay"]
pub const fluid_gen_type_GEN_MODENVDECAY: fluid_gen_type = 28;
#[doc = "< Modulation envelope sustain"]
pub const fluid_gen_type_GEN_MODENVSUSTAIN: fluid_gen_type = 29;
#[doc = "< Modulation envelope release"]
pub const fluid_gen_type_GEN_MODENVRELEASE: fluid_gen_type = 30;
#[doc = "< Key to modulation envelope hold"]
pub const fluid_gen_type_GEN_KEYTOMODENVHOLD: fluid_gen_type = 31;
#[doc = "< Key to modulation envelope decay"]
pub const fluid_gen_type_GEN_KEYTOMODENVDECAY: fluid_gen_type = 32;
#[doc = "< Volume envelope delay"]
pub const fluid_gen_type_GEN_VOLENVDELAY: fluid_gen_type = 33;
#[doc = "< Volume envelope attack"]
pub const fluid_gen_type_GEN_VOLENVATTACK: fluid_gen_type = 34;
#[doc = "< Volume envelope hold"]
pub const fluid_gen_type_GEN_VOLENVHOLD: fluid_gen_type = 35;
#[doc = "< Volume envelope decay"]
pub const fluid_gen_type_GEN_VOLENVDECAY: fluid_gen_type = 36;
#[doc = "< Volume envelope sustain"]
pub const fluid_gen_type_GEN_VOLENVSUSTAIN: fluid_gen_type = 37;
#[doc = "< Volume envelope release"]
pub const fluid_gen_type_GEN_VOLENVRELEASE: fluid_gen_type = 38;
#[doc = "< Key to volume envelope hold"]
pub const fluid_gen_type_GEN_KEYTOVOLENVHOLD: fluid_gen_type = 39;
#[doc = "< Key to volume envelope decay"]
pub const fluid_gen_type_GEN_KEYTOVOLENVDECAY: fluid_gen_type = 40;
#[doc = "< Instrument ID (shouldn't be set by user)"]
pub const fluid_gen_type_GEN_INSTRUMENT: fluid_gen_type = 41;
#[doc = "< Reserved"]
pub const fluid_gen_type_GEN_RESERVED1: fluid_gen_type = 42;
#[doc = "< MIDI note range"]
pub const fluid_gen_type_GEN_KEYRANGE: fluid_gen_type = 43;
#[doc = "< MIDI velocity range"]
pub const fluid_gen_type_GEN_VELRANGE: fluid_gen_type = 44;
#[doc = "< Sample start loop address coarse offset (X 32768)"]
pub const fluid_gen_type_GEN_STARTLOOPADDRCOARSEOFS: fluid_gen_type = 45;
#[doc = "< Fixed MIDI note number"]
pub const fluid_gen_type_GEN_KEYNUM: fluid_gen_type = 46;
#[doc = "< Fixed MIDI velocity value"]
pub const fluid_gen_type_GEN_VELOCITY: fluid_gen_type = 47;
#[doc = "< Initial volume attenuation"]
pub const fluid_gen_type_GEN_ATTENUATION: fluid_gen_type = 48;
#[doc = "< Reserved"]
pub const fluid_gen_type_GEN_RESERVED2: fluid_gen_type = 49;
#[doc = "< Sample end loop address coarse offset (X 32768)"]
pub const fluid_gen_type_GEN_ENDLOOPADDRCOARSEOFS: fluid_gen_type = 50;
#[doc = "< Coarse tuning"]
pub const fluid_gen_type_GEN_COARSETUNE: fluid_gen_type = 51;
#[doc = "< Fine tuning"]
pub const fluid_gen_type_GEN_FINETUNE: fluid_gen_type = 52;
#[doc = "< Sample ID (shouldn't be set by user)"]
pub const fluid_gen_type_GEN_SAMPLEID: fluid_gen_type = 53;
#[doc = "< Sample mode flags"]
pub const fluid_gen_type_GEN_SAMPLEMODE: fluid_gen_type = 54;
#[doc = "< Reserved"]
pub const fluid_gen_type_GEN_RESERVED3: fluid_gen_type = 55;
#[doc = "< Scale tuning"]
pub const fluid_gen_type_GEN_SCALETUNE: fluid_gen_type = 56;
#[doc = "< Exclusive class number"]
pub const fluid_gen_type_GEN_EXCLUSIVECLASS: fluid_gen_type = 57;
#[doc = "< Sample root note override"]
pub const fluid_gen_type_GEN_OVERRIDEROOTKEY: fluid_gen_type = 58;
#[doc = "< Pitch (NOTE: Not a real SoundFont generator)"]
pub const fluid_gen_type_GEN_PITCH: fluid_gen_type = 59;
#[doc = "< Value defines the count of generators (#fluid_gen_type)"]
pub const fluid_gen_type_GEN_LAST: fluid_gen_type = 60;
#[doc = " Generator (effect) numbers (Soundfont 2.01 specifications section 8.1.3)"]
pub type fluid_gen_type = u32;
#[doc = " SoundFont generator structure."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fluid_gen_t {
    #[doc = "< Is the generator set or not (#fluid_gen_flags)"]
    pub flags: ::std::os::raw::c_uchar,
    #[doc = "< The nominal value"]
    pub val: f64,
    #[doc = "< Change by modulators"]
    pub mod_: f64,
    #[doc = "< Change by NRPN messages"]
    pub nrpn: f64,
}
#[test]
fn bindgen_test_layout__fluid_gen_t() {
    assert_eq!(
        ::std::mem::size_of::<_fluid_gen_t>(),
        32usize,
        concat!("Size of: ", stringify!(_fluid_gen_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_fluid_gen_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_fluid_gen_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fluid_gen_t>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_fluid_gen_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fluid_gen_t>())).val as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_fluid_gen_t),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fluid_gen_t>())).mod_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_fluid_gen_t),
            "::",
            stringify!(mod_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fluid_gen_t>())).nrpn as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_fluid_gen_t),
            "::",
            stringify!(nrpn)
        )
    );
}
pub type fluid_gen_t = _fluid_gen_t;
#[doc = "< Generator value is not set"]
pub const fluid_gen_flags_GEN_UNUSED: fluid_gen_flags = 0;
#[doc = "< Generator value is set"]
pub const fluid_gen_flags_GEN_SET: fluid_gen_flags = 1;
#[doc = "< DOCME"]
pub const fluid_gen_flags_GEN_ABS_NRPN: fluid_gen_flags = 2;
#[doc = " Enum value for 'flags' field of #_fluid_gen_t (not really flags)."]
pub type fluid_gen_flags = u32;
pub const fluid_voice_add_mod_FLUID_VOICE_OVERWRITE: fluid_voice_add_mod = 0;
pub const fluid_voice_add_mod_FLUID_VOICE_ADD: fluid_voice_add_mod = 1;
pub const fluid_voice_add_mod_FLUID_VOICE_DEFAULT: fluid_voice_add_mod = 2;
pub type fluid_voice_add_mod = u32;
